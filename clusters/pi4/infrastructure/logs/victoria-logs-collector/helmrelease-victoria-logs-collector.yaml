apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: victoria-logs-collector
  namespace: vm
spec:
  releaseName: victoria-logs-collector
  chart:
    spec:
      chart: victoria-logs-collector
      version: "0.0.5" # потрібна реальна версія
      sourceRef:
        kind: HelmRepository
        name: victoria-metrics
        namespace: flux-system
  interval: 1m
  values:
    # Конфігурація Vector для правильного форматування логів для VictoriaLogs
    vector:
      role: Agent
      customConfig:
        data_dir: /vector-data-dir
        api:
          enabled: true
          address: 127.0.0.1:8686
          playground: false
        sources:
          kubernetes_logs:
            type: kubernetes_logs
            # Збір логів з усіх подів у кластері
            auto_partial_merge: true
            # Налаштування чекпойнтів - важливо для вирішення помилки прав доступу
            data_dir: /vector-data-dir/checkpoints
            fingerprint:
              strategy: "checksum"
            # Додавання мітаданих Kubernetes
            annotation_fields:
              container_image: "kubernetes.container_image"
              container_name: "kubernetes.container_name"
              pod_name: "kubernetes.pod_name"
              pod_namespace: "kubernetes.pod_namespace"
              pod_node_name: "kubernetes.pod_node_name"
            # Обробка багаторядкових логів
            multiline:
              condition_pattern: '^\d{4}-\d{2}-\d{2}'
              mode: halt_before
              start_pattern: '^\d{4}-\d{2}-\d{2}'
              timeout_ms: 1000
        transforms:
          # Трансформація для додавання обов'язкового поля _msg
          add_msg_field:
            type: remap
            inputs:
              - kubernetes_logs
            source: |
              # Встановлюємо _msg поле з основного повідомлення
              if exists(.message) {
                ._msg = .message
              } else if exists(.log) {
                ._msg = .log
              } else {
                ._msg = to_string(.)
              }
              
              # Додаємо часову мітку у форматі, який розуміє VictoriaLogs
              if exists(.timestamp) {
                ._time = .timestamp
              } else {
                ._time = now()
              }
              
              # Зберігаємо корисні Kubernetes мітадані як лейбли
              if exists(.kubernetes.container_name) {
                .container = .kubernetes.container_name
              }
              if exists(.kubernetes.pod_name) {
                .pod = .kubernetes.pod_name
              }
              if exists(.kubernetes.pod_namespace) {
                .namespace = .kubernetes.pod_namespace
              }
              if exists(.kubernetes.pod_node_name) {
                .node = .kubernetes.pod_node_name
              }
              
              # Очищаємо оригінальні поля, які можуть конфліктувати
              del(.message)
              del(.log)
              del(.kubernetes)
              
              # Додаємо корисні мітки
              .stream = "kubernetes"
              if !exists(.level) {
                .level = "info"
              }
        sinks:
          vlogs_sink:
            type: http
            inputs:
              - add_msg_field
            uri: "http://vlinsert-dev-logs.vm.svc.cluster.local:9481/insert/jsonline"
            method: post
            encoding:
              codec: json
            headers:
              Content-Type: "application/x-ndjson"
            # Батчинг для кращої продуктивності
            batch:
              max_events: 1000
              timeout_secs: 10
            # Повторні спроби у випадку помилок
            request:
              retry_attempts: 3
              retry_initial_backoff_secs: 1
              retry_max_duration_secs: 60
            # Буферизація для кращої продуктивності
            buffer:
              type: disk
              max_size: 268435488 # 256MB
              when_full: block

    # Ресурси для Vector
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 1000m
        memory: 512Mi

    # ВИПРАВЛЕНИЙ securityContext - дозволяємо читання логів
    securityContext:
      runAsUser: 0  # root потрібен для читання /var/log
      runAsGroup: 0
      privileged: false
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      capabilities:
        add:
          - DAC_OVERRIDE  # для читання системних логів
        drop:
          - ALL

    podSecurityContext:
      runAsUser: 0
      runAsGroup: 0
      fsGroup: 0

    # Толерації для розгортання на всіх нодах
    tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists

    # Примусове розгортання на всіх нодах як DaemonSet
    daemonset:
      enabled: true

    # ВИПРАВЛЕНІ монтування логів контейнерів з правильними правами
    extraVolumeMounts:
      - name: var-log
        mountPath: /var/log
        readOnly: true
      - name: var-lib-docker-containers
        mountPath: /var/lib/docker/containers
        readOnly: true
      # K3s специфічні логи
      - name: k3s-logs
        mountPath: /var/lib/rancher/k3s/agent/logs
        readOnly: true
      # Директорія для чекпойнтів з правами запису
      - name: vector-data-dir
        mountPath: /vector-data-dir
      # Proc filesystem для системної інформації
      - name: proc
        mountPath: /host/proc
        readOnly: true
      - name: sys
        mountPath: /host/sys
        readOnly: true

    extraVolumes:
      - name: var-log
        hostPath:
          path: /var/log
          type: DirectoryOrCreate
      - name: var-lib-docker-containers
        hostPath:
          path: /var/lib/docker/containers
          type: DirectoryOrCreate
      # K3s специфічні логи
      - name: k3s-logs
        hostPath:
          path: /var/lib/rancher/k3s/agent/logs
          type: DirectoryOrCreate
      # Директорія для чекпойнтів - використовуємо hostPath з правами запису
      - name: vector-data-dir
        hostPath:
          path: /var/lib/vector-data
          type: DirectoryOrCreate
      - name: proc
        hostPath:
          path: /proc
          type: Directory
      - name: sys
        hostPath:
          path: /sys
          type: Directory

    # Змінні оточення
    env:
      - name: VECTOR_LOG
        value: "info"
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            fieldPath: spec.nodeName
      # Важливо для правильної роботи чекпойнтів
      - name: VECTOR_DATA_DIR
        value: "/vector-data-dir"

    # ServiceAccount з необхідними правами
    serviceAccount:
      create: true
      name: victoria-logs-collector

# Додаткові ресурси для правильних RBAC прав
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: victoria-logs-collector
rules:
- apiGroups: [""]
  resources: ["pods", "namespaces", "nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: victoria-logs-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: victoria-logs-collector
subjects:
- kind: ServiceAccount
  name: victoria-logs-collector
  namespace: vm

---
# DaemonSet для створення директорій на хостах
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vector-data-dir-init
  namespace: vm
spec:
  selector:
    matchLabels:
      name: vector-data-dir-init
  template:
    metadata:
      labels:
        name: vector-data-dir-init
    spec:
      initContainers:
      - name: create-vector-data-dir
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          mkdir -p /host/var/lib/vector-data/checkpoints
          chmod 755 /host/var/lib/vector-data
          chmod 755 /host/var/lib/vector-data/checkpoints
          echo "Vector data directory created successfully"
        securityContext:
          privileged: true
        volumeMounts:
        - name: host-var-lib
          mountPath: /host/var/lib
      containers:
      - name: pause
        image: k8s.gcr.io/pause:3.8
        resources:
          requests:
            cpu: 1m
            memory: 1Mi
      volumes:
      - name: host-var-lib
        hostPath:
          path: /var/lib
          type: Directory
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
